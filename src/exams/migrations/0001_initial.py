# Generated by Django 5.2.1 on 2025-05-19 18:47

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0002_initial'),
        ('students', '0001_initial'),
        ('teachers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExamType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('contribution_percentage', models.DecimalField(decimal_places=2, help_text='How much this exam contributes to the final grade (percentage)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='contribution percentage')),
            ],
            options={
                'verbose_name': 'exam type',
                'verbose_name_plural': 'exam types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(verbose_name='end date')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20, verbose_name='status')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='courses.academicyear', verbose_name='academic year')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_exams', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('exam_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='exams.examtype', verbose_name='exam type')),
            ],
            options={
                'verbose_name': 'exam',
                'verbose_name_plural': 'exams',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ExamSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='date')),
                ('start_time', models.TimeField(verbose_name='start time')),
                ('end_time', models.TimeField(verbose_name='end time')),
                ('room', models.CharField(max_length=50, verbose_name='room')),
                ('total_marks', models.PositiveIntegerField(verbose_name='total marks')),
                ('passing_marks', models.PositiveIntegerField(verbose_name='passing marks')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20, verbose_name='status')),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_schedules', to='courses.class', verbose_name='class')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_schedules', to='exams.exam', verbose_name='exam')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_schedules', to='courses.subject', verbose_name='subject')),
                ('supervisor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervised_exams', to='teachers.teacher', verbose_name='supervisor')),
            ],
            options={
                'verbose_name': 'exam schedule',
                'verbose_name_plural': 'exam schedules',
                'ordering': ['date', 'start_time'],
                'unique_together': {('exam', 'class_obj', 'subject')},
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('start_datetime', models.DateTimeField(verbose_name='start datetime')),
                ('end_datetime', models.DateTimeField(verbose_name='end datetime')),
                ('duration_minutes', models.PositiveIntegerField(verbose_name='duration minutes')),
                ('total_marks', models.PositiveIntegerField(verbose_name='total marks')),
                ('passing_marks', models.PositiveIntegerField(verbose_name='passing marks')),
                ('attempts_allowed', models.PositiveIntegerField(default=1, verbose_name='attempts allowed')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('closed', 'Closed')], default='draft', max_length=20, verbose_name='status')),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='courses.class', verbose_name='class')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='courses.subject', verbose_name='subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='teachers.teacher', verbose_name='teacher')),
            ],
            options={
                'verbose_name': 'quiz',
                'verbose_name_plural': 'quizzes',
                'ordering': ['-start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='question text')),
                ('question_type', models.CharField(choices=[('mcq', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay')], max_length=20, verbose_name='question type')),
                ('options', models.JSONField(blank=True, default=list, help_text='Options for MCQ questions', verbose_name='options')),
                ('correct_answer', models.TextField(verbose_name='correct answer')),
                ('explanation', models.TextField(blank=True, verbose_name='explanation')),
                ('marks', models.PositiveIntegerField(verbose_name='marks')),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20, verbose_name='difficulty level')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='exams.quiz', verbose_name='quiz')),
            ],
            options={
                'verbose_name': 'question',
                'verbose_name_plural': 'questions',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='StudentQuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end time')),
                ('marks_obtained', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='marks obtained')),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='percentage')),
                ('is_pass', models.BooleanField(default=False, verbose_name='is pass')),
                ('attempt_number', models.PositiveIntegerField(default=1, verbose_name='attempt number')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_attempts', to='exams.quiz', verbose_name='quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to='students.student', verbose_name='student')),
            ],
            options={
                'verbose_name': 'student quiz attempt',
                'verbose_name_plural': 'student quiz attempts',
                'ordering': ['-start_time'],
                'unique_together': {('student', 'quiz', 'attempt_number')},
            },
        ),
        migrations.CreateModel(
            name='GradingSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_name', models.CharField(max_length=10, verbose_name='grade name')),
                ('min_percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='minimum percentage')),
                ('max_percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='maximum percentage')),
                ('grade_point', models.DecimalField(decimal_places=1, max_digits=3, verbose_name='grade point')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grading_systems', to='courses.academicyear', verbose_name='academic year')),
            ],
            options={
                'verbose_name': 'grading system',
                'verbose_name_plural': 'grading systems',
                'ordering': ['-grade_point'],
                'unique_together': {('academic_year', 'grade_name')},
            },
        ),
        migrations.CreateModel(
            name='ReportCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(choices=[('first', 'First'), ('second', 'Second'), ('final', 'Final')], max_length=10, verbose_name='term')),
                ('generation_date', models.DateField(auto_now_add=True, verbose_name='generation date')),
                ('total_marks', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='total marks')),
                ('marks_obtained', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='marks obtained')),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='percentage')),
                ('grade', models.CharField(max_length=10, verbose_name='grade')),
                ('grade_point_average', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='grade point average')),
                ('rank', models.PositiveIntegerField(blank=True, null=True, verbose_name='rank')),
                ('remarks', models.TextField(blank=True, verbose_name='remarks')),
                ('attendance_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='attendance percentage')),
                ('class_teacher_remarks', models.TextField(blank=True, verbose_name='class teacher remarks')),
                ('principal_remarks', models.TextField(blank=True, verbose_name='principal remarks')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20, verbose_name='status')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_cards', to='courses.academicyear', verbose_name='academic year')),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_cards', to='courses.class', verbose_name='class')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_report_cards', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_cards', to='students.student', verbose_name='student')),
            ],
            options={
                'verbose_name': 'report card',
                'verbose_name_plural': 'report cards',
                'ordering': ['student__user__first_name', 'student__user__last_name'],
                'unique_together': {('student', 'class_obj', 'academic_year', 'term')},
            },
        ),
        migrations.CreateModel(
            name='StudentExamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks_obtained', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='marks obtained')),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='percentage')),
                ('grade', models.CharField(blank=True, max_length=10, verbose_name='grade')),
                ('remarks', models.TextField(blank=True, verbose_name='remarks')),
                ('is_pass', models.BooleanField(default=False, verbose_name='is pass')),
                ('entry_date', models.DateTimeField(auto_now_add=True, verbose_name='entry date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('entered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entered_results', to=settings.AUTH_USER_MODEL, verbose_name='entered by')),
                ('exam_schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_results', to='exams.examschedule', verbose_name='exam schedule')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_results', to='students.student', verbose_name='student')),
            ],
            options={
                'verbose_name': 'student exam result',
                'verbose_name_plural': 'student exam results',
                'ordering': ['student__user__first_name', 'student__user__last_name'],
                'unique_together': {('student', 'exam_schedule')},
            },
        ),
        migrations.CreateModel(
            name='StudentQuizResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_option', models.IntegerField(blank=True, help_text='Index of selected option for MCQ questions', null=True, verbose_name='selected option')),
                ('answer_text', models.TextField(blank=True, help_text='Text answer for non-MCQ questions', verbose_name='answer text')),
                ('is_correct', models.BooleanField(default=False, verbose_name='is correct')),
                ('marks_obtained', models.DecimalField(decimal_places=2, default=0, max_digits=6, verbose_name='marks obtained')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_responses', to='exams.question', verbose_name='question')),
                ('student_quiz_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='exams.studentquizattempt', verbose_name='student quiz attempt')),
            ],
            options={
                'verbose_name': 'student quiz response',
                'verbose_name_plural': 'student quiz responses',
                'unique_together': {('student_quiz_attempt', 'question')},
            },
        ),
    ]
