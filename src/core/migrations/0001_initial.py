# Generated by Django 5.2.1 on 2025-05-29 14:07

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0002_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentPerformanceAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('highest_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('lowest_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grade_point', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('attendance_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assignment_completion_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assignments_submitted', models.PositiveIntegerField(default=0)),
                ('assignments_on_time', models.PositiveIntegerField(default=0)),
                ('ranking_in_class', models.PositiveIntegerField(blank=True, null=True)),
                ('ranking_in_grade', models.PositiveIntegerField(blank=True, null=True)),
                ('ranking_in_section', models.PositiveIntegerField(blank=True, null=True)),
                ('improvement_trend', models.CharField(blank=True, choices=[('improving', 'Improving'), ('declining', 'Declining'), ('stable', 'Stable'), ('fluctuating', 'Fluctuating')], max_length=20, null=True)),
                ('trend_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-academic_year', '-term', 'student'],
            },
        ),
        migrations.CreateModel(
            name='SystemHealthMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('db_connection_count', models.PositiveIntegerField(default=0)),
                ('db_query_count', models.PositiveIntegerField(default=0)),
                ('avg_query_time_ms', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('cache_hit_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('cache_memory_usage_mb', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('active_users', models.PositiveIntegerField(default=0)),
                ('requests_per_minute', models.PositiveIntegerField(default=0)),
                ('avg_response_time_ms', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('error_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('pending_tasks', models.PositiveIntegerField(default=0)),
                ('failed_tasks', models.PositiveIntegerField(default=0)),
                ('completed_tasks', models.PositiveIntegerField(default=0)),
                ('storage_used_gb', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('storage_available_gb', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SystemSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting_key', models.CharField(db_index=True, max_length=100, unique=True)),
                ('setting_value', models.TextField()),
                ('data_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('boolean', 'Boolean'), ('json', 'JSON'), ('text', 'Text')], default='string', max_length=20)),
                ('category', models.CharField(choices=[('academic', 'Academic'), ('financial', 'Financial'), ('system', 'System'), ('communication', 'Communication'), ('security', 'Security'), ('analytics', 'Analytics')], default='system', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_editable', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'setting_key'],
            },
        ),
        migrations.CreateModel(
            name='TeacherPerformanceAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classes_taught', models.PositiveIntegerField(default=0)),
                ('subjects_taught', models.PositiveIntegerField(default=0)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('teaching_hours_per_week', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('average_class_performance', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('students_above_average', models.PositiveIntegerField(default=0)),
                ('students_below_average', models.PositiveIntegerField(default=0)),
                ('improvement_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('attendance_rate', models.DecimalField(decimal_places=2, default=100, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('punctuality_rate', models.DecimalField(decimal_places=2, default=100, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assignments_given', models.PositiveIntegerField(default=0)),
                ('assignments_graded', models.PositiveIntegerField(default=0)),
                ('assignments_graded_on_time', models.PositiveIntegerField(default=0)),
                ('average_grading_time_days', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('training_hours_completed', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('certifications_earned', models.PositiveIntegerField(default=0)),
                ('peer_evaluation_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('student_feedback_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('parent_feedback_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('overall_performance_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-academic_year', '-term', 'teacher'],
            },
        ),
        migrations.CreateModel(
            name='AttendanceAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(choices=[('student', 'Student'), ('class', 'Class'), ('grade', 'Grade'), ('section', 'Section'), ('teacher', 'Teacher')], max_length=20)),
                ('entity_id', models.PositiveIntegerField()),
                ('entity_name', models.CharField(max_length=200)),
                ('month', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('year', models.PositiveIntegerField(blank=True, null=True)),
                ('total_days', models.PositiveIntegerField(default=0)),
                ('present_days', models.PositiveIntegerField(default=0)),
                ('absent_days', models.PositiveIntegerField(default=0)),
                ('late_days', models.PositiveIntegerField(default=0)),
                ('excused_days', models.PositiveIntegerField(default=0)),
                ('attendance_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('consecutive_absences', models.PositiveIntegerField(default=0)),
                ('frequent_late_arrivals', models.BooleanField(default=False)),
                ('attendance_trend', models.CharField(blank=True, choices=[('improving', 'Improving'), ('declining', 'Declining'), ('stable', 'Stable')], max_length=20, null=True)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.academicyear')),
                ('term', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='academics.term')),
            ],
            options={
                'ordering': ['-academic_year', '-term', 'entity_type', 'entity_name'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout'), ('view', 'View'), ('export', 'Export'), ('import', 'Import'), ('password_change', 'Password Change'), ('permission_change', 'Permission Change'), ('bulk_action', 'Bulk Action'), ('system_action', 'System Action')], max_length=20)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('data_before', models.JSONField(blank=True, null=True)),
                ('data_after', models.JSONField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('session_key', models.CharField(blank=True, max_length=40)),
                ('description', models.TextField(blank=True)),
                ('module_name', models.CharField(blank=True, max_length=50)),
                ('view_name', models.CharField(blank=True, max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('duration_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ClassPerformanceAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_average', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('highest_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('lowest_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('median_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('standard_deviation', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('students_above_average', models.PositiveIntegerField(default=0)),
                ('students_below_average', models.PositiveIntegerField(default=0)),
                ('students_at_risk', models.PositiveIntegerField(default=0)),
                ('pass_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('distinction_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grade_ranking', models.PositiveIntegerField(blank=True, null=True)),
                ('section_ranking', models.PositiveIntegerField(blank=True, null=True)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.academicyear')),
                ('class_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.class')),
            ],
            options={
                'ordering': ['-academic_year', '-term', 'class_instance'],
            },
        ),
    ]
