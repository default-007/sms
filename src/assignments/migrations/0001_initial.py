# Generated by Django 5.2.1 on 2025-05-29 14:07

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import src.assignments.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssignmentComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_private', models.BooleanField(default=False, help_text='Only visible to teachers')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'assignments_comment',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentRubric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criteria_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('max_points', models.PositiveIntegerField()),
                ('weight_percentage', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('excellent_description', models.TextField(help_text='90-100% performance')),
                ('good_description', models.TextField(help_text='70-89% performance')),
                ('satisfactory_description', models.TextField(help_text='50-69% performance')),
                ('needs_improvement_description', models.TextField(help_text='Below 50% performance')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'assignments_rubric',
            },
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, help_text='Text submission or notes')),
                ('attachment', models.FileField(blank=True, help_text='Submitted file', null=True, upload_to=src.assignments.models.submission_attachment_path)),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('submission_method', models.CharField(choices=[('online', 'Online Upload'), ('physical', 'Physical Handover'), ('email', 'Email Submission')], default='online', max_length=10)),
                ('student_remarks', models.TextField(blank=True, help_text="Student's notes or comments about the submission")),
                ('marks_obtained', models.PositiveIntegerField(blank=True, help_text='Marks awarded for this submission', null=True)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage score calculated automatically', max_digits=5, null=True)),
                ('grade', models.CharField(blank=True, help_text='Letter grade (A, B, C, etc.)', max_length=5)),
                ('teacher_remarks', models.TextField(blank=True, help_text="Teacher's feedback and comments")),
                ('strengths', models.TextField(blank=True, help_text='What the student did well')),
                ('improvements', models.TextField(blank=True, help_text='Areas for improvement')),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('late', 'Late Submission'), ('graded', 'Graded'), ('returned', 'Returned for Revision')], default='submitted', max_length=10)),
                ('is_late', models.BooleanField(default=False)),
                ('late_penalty_applied', models.BooleanField(default=False)),
                ('original_marks', models.PositiveIntegerField(blank=True, help_text='Marks before late penalty', null=True)),
                ('plagiarism_score', models.DecimalField(blank=True, decimal_places=2, help_text='Plagiarism percentage (0-100)', max_digits=5, null=True)),
                ('plagiarism_checked', models.BooleanField(default=False)),
                ('plagiarism_report', models.JSONField(blank=True, help_text='Detailed plagiarism analysis', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('revision_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'assignments_submission',
                'ordering': ['-submission_date'],
            },
        ),
        migrations.CreateModel(
            name='SubmissionGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_earned', models.PositiveIntegerField()),
                ('feedback', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'assignments_submission_grade',
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('instructions', models.TextField(blank=True, help_text='Detailed instructions for students')),
                ('assigned_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('due_date', models.DateTimeField()),
                ('total_marks', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('passing_marks', models.PositiveIntegerField(blank=True, help_text='Minimum marks required to pass', null=True)),
                ('attachment', models.FileField(blank=True, help_text='Assignment file, questions, or reference material', null=True, upload_to=src.assignments.models.assignment_attachment_path)),
                ('submission_type', models.CharField(choices=[('online', 'Online'), ('physical', 'Physical'), ('both', 'Both Online and Physical')], default='online', max_length=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('closed', 'Closed'), ('archived', 'Archived')], default='draft', max_length=10)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('allow_late_submission', models.BooleanField(default=True)),
                ('late_penalty_percentage', models.PositiveIntegerField(default=10, help_text='Percentage deduction for late submissions', validators=[django.core.validators.MaxValueValidator(100)])),
                ('max_file_size_mb', models.PositiveIntegerField(default=10, help_text='Maximum file size in MB for submissions')),
                ('allowed_file_types', models.CharField(default='pdf,doc,docx,txt', help_text='Comma-separated list of allowed file extensions', max_length=200)),
                ('estimated_duration_hours', models.PositiveIntegerField(blank=True, help_text='Estimated time to complete in hours', null=True)),
                ('learning_objectives', models.TextField(blank=True, help_text='Learning objectives this assignment addresses')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('auto_grade', models.BooleanField(default=False, help_text='Automatically grade based on rubric')),
                ('peer_review', models.BooleanField(default=False, help_text='Enable peer review for this assignment')),
                ('class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='academics.class')),
            ],
            options={
                'db_table': 'assignments_assignment',
                'ordering': ['-created_at'],
            },
        ),
    ]
