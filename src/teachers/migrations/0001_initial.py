# Generated by Django 5.2.1 on 2025-05-29 14:07

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0002_initial'),
        ('subjects', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(db_index=True, max_length=20, unique=True)),
                ('joining_date', models.DateField(db_index=True)),
                ('qualification', models.CharField(max_length=500)),
                ('experience_years', models.DecimalField(db_index=True, decimal_places=1, default=0, max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('specialization', models.CharField(max_length=500)),
                ('position', models.CharField(max_length=100)),
                ('salary', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('contract_type', models.CharField(choices=[('Permanent', 'Permanent'), ('Temporary', 'Temporary'), ('Contract', 'Contract')], db_index=True, max_length=20)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('On Leave', 'On Leave'), ('Terminated', 'Terminated')], db_index=True, default='Active', max_length=20)),
                ('bio', models.TextField(blank=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('emergency_phone', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teachers', to='academics.department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['employee_id'],
                'permissions': [('view_teacher_details', 'Can view detailed teacher information'), ('assign_classes', 'Can assign classes to teachers'), ('view_teacher_analytics', 'Can view teacher analytics'), ('export_teacher_data', 'Can export teacher data'), ('evaluate_teacher', 'Can evaluate teacher performance')],
            },
        ),
        migrations.CreateModel(
            name='TeacherClassAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_class_teacher', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_assignments', to='academics.academicyear')),
                ('class_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_assignments', to='academics.class')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_assignments', to='subjects.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_assignments', to='teachers.teacher')),
                ('term', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_assignments', to='academics.term')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_date', models.DateField(db_index=True)),
                ('evaluation_period_start', models.DateField(blank=True, null=True)),
                ('evaluation_period_end', models.DateField(blank=True, null=True)),
                ('criteria', models.JSONField(default=dict)),
                ('score', models.DecimalField(db_index=True, decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('weighted_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score calculated using category weights', max_digits=5, null=True)),
                ('remarks', models.TextField()),
                ('strengths', models.TextField(blank=True)),
                ('areas_for_improvement', models.TextField(blank=True)),
                ('followup_actions', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('reviewed', 'Reviewed'), ('approved', 'Approved'), ('closed', 'Closed')], db_index=True, default='submitted', max_length=20)),
                ('followup_date', models.DateField(blank=True, null=True)),
                ('followup_completed', models.BooleanField(default=False)),
                ('followup_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_evaluations', to='academics.academicyear')),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_evaluations', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='teachers.teacher')),
                ('term', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_evaluations', to='academics.term')),
            ],
            options={
                'ordering': ['-evaluation_date'],
            },
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['joining_date'], name='teachers_te_joining_839dd3_idx'),
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['department', 'status'], name='teachers_te_departm_ecac29_idx'),
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['contract_type', 'status'], name='teachers_te_contrac_013103_idx'),
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['experience_years'], name='teachers_te_experie_1e3741_idx'),
        ),
        migrations.AddIndex(
            model_name='teacher',
            index=models.Index(fields=['status', 'created_at'], name='teachers_te_status_6c1924_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherclassassignment',
            index=models.Index(fields=['teacher', 'academic_year'], name='teachers_te_teacher_be5946_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherclassassignment',
            index=models.Index(fields=['class_instance', 'academic_year'], name='teachers_te_class_i_265fa7_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherclassassignment',
            index=models.Index(fields=['subject', 'academic_year'], name='teachers_te_subject_301fd7_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherclassassignment',
            index=models.Index(fields=['is_class_teacher'], name='teachers_te_is_clas_184322_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherclassassignment',
            index=models.Index(fields=['is_active', 'academic_year'], name='teachers_te_is_acti_06a31f_idx'),
        ),
        migrations.AddConstraint(
            model_name='teacherclassassignment',
            constraint=models.UniqueConstraint(condition=models.Q(('is_class_teacher', True)), fields=('class_instance', 'academic_year'), name='unique_class_teacher_per_class_year'),
        ),
        migrations.AlterUniqueTogether(
            name='teacherclassassignment',
            unique_together={('teacher', 'class_instance', 'subject', 'academic_year')},
        ),
        migrations.AddIndex(
            model_name='teacherevaluation',
            index=models.Index(fields=['teacher', 'evaluation_date'], name='teachers_te_teacher_dcba80_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherevaluation',
            index=models.Index(fields=['teacher', 'score'], name='teachers_te_teacher_8acafe_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherevaluation',
            index=models.Index(fields=['evaluator', 'evaluation_date'], name='teachers_te_evaluat_8d43f9_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherevaluation',
            index=models.Index(fields=['status', 'evaluation_date'], name='teachers_te_status_ad902e_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherevaluation',
            index=models.Index(fields=['academic_year', 'term'], name='teachers_te_academi_69be68_idx'),
        ),
    ]
