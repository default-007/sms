# Generated by Django 5.2.1 on 2025-05-29 14:07

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SchedulingConstraint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('constraint_type', models.CharField(choices=[('teacher_availability', 'Teacher Availability'), ('room_requirement', 'Room Requirement'), ('subject_priority', 'Subject Priority'), ('consecutive_periods', 'Consecutive Periods'), ('daily_limit', 'Daily Subject Limit'), ('time_preference', 'Time Preference')], max_length=30)),
                ('parameters', models.JSONField(default=dict)),
                ('priority', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('is_hard_constraint', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'scheduling_constraint',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('duration_minutes', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180)])),
                ('period_number', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('name', models.CharField(blank=True, max_length=50)),
                ('is_break', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'scheduling_timeslot',
                'ordering': ['day_of_week', 'period_number', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('effective_from_date', models.DateField()),
                ('effective_to_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'scheduling_timetable',
            },
        ),
        migrations.CreateModel(
            name='TimetableGeneration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('algorithm_used', models.CharField(default='genetic_algorithm', max_length=50)),
                ('parameters', models.JSONField(default=dict)),
                ('result_summary', models.JSONField(default=dict)),
                ('conflicts_resolved', models.IntegerField(default=0)),
                ('optimization_score', models.FloatField(blank=True, null=True)),
                ('execution_time_seconds', models.FloatField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'scheduling_timetable_generation',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='TimetableTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_default', models.BooleanField(default=False)),
                ('configuration', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'scheduling_timetable_template',
                'ordering': ['grade', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('number', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('room_type', models.CharField(choices=[('classroom', 'Regular Classroom'), ('laboratory', 'Laboratory'), ('library', 'Library'), ('auditorium', 'Auditorium'), ('gymnasium', 'Gymnasium'), ('computer_lab', 'Computer Lab'), ('music_room', 'Music Room'), ('art_room', 'Art Room'), ('conference', 'Conference Room'), ('outdoor', 'Outdoor Area')], default='classroom', max_length=20)),
                ('building', models.CharField(blank=True, max_length=50)),
                ('floor', models.CharField(blank=True, max_length=10)),
                ('capacity', models.PositiveIntegerField(default=30)),
                ('equipment', models.JSONField(blank=True, default=list)),
                ('is_available', models.BooleanField(default=True)),
                ('maintenance_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'scheduling_room',
                'ordering': ['building', 'floor', 'number'],
                'indexes': [models.Index(fields=['room_type'], name='scheduling__room_ty_f002e2_idx'), models.Index(fields=['is_available'], name='scheduling__is_avai_db7e14_idx')],
            },
        ),
        migrations.CreateModel(
            name='SubstituteTeacher',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('reason', models.CharField(max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_substitutions', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_substitutions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'scheduling_substitute_teacher',
            },
        ),
    ]
